@model IEnumerable<VehicleRentalSystem.Models.Customer>

<div class="container mt-5">
    <h2 class="text-center mb-4">Manage Customers</h2>
    <div class="card p-5 rounded" style="background-color: white; border: 2px solid #f9f9f9;">
        <h3 class="text-center text-dark mb-4">Add Customer</h3>
        <form id="addCustomerForm" asp-action="Create" method="post" onsubmit="handleAddCustomerSubmit(event)">
            <div class="mb-3">
                <label for="CustomerName" class="form-label text-dark">Name</label>
                <input type="text" id="CustomerName" name="CustomerName" class="form-control" placeholder="Enter customer name" required />
            </div>
            <div class="mb-3">
                <label for="Email" class="form-label text-dark">Email Address</label>
                <input type="email" id="Email" name="Email" class="form-control" placeholder="Enter customer email" required />
            </div>
            <div class="mb-3">
                <label for="PhoneNumber" class="form-label text-dark">Phone Number</label>
                <input type="text" id="PhoneNumber" name="PhoneNumber" class="form-control" placeholder="Enter phone number" required />
            </div>
            <div class="text-center">
                <button type="submit" class="btn btn-primary btn-gradient">Add Customer</button>
            </div>
        </form>
    </div>

    <hr />

    <!-- List of Customers -->
    <h4 class="text-center mt-5">Customers List</h4>
    <table class="table table-bordered table-striped mt-3">
        <thead class="gradient-bg text-white">
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in Model)
            {
                <tr>
                    <td>@customer.CustomerName</td>
                    <td>@customer.Email</td>
                    <td>@customer.PhoneNumber</td>
                    <td>
                        <!-- Update Form -->
                        <form id="updateCustomerForm-@customer.CustomerID" asp-action="Edit" method="post" class="mb-3">
                            <input type="hidden" name="CustomerID" value="@customer.CustomerID" />
                            <div class="mb-2">
                                <input type="text" name="CustomerName" class="form-control" value="@customer.CustomerName" required placeholder="Name" />
                            </div>
                            <div class="mb-2">
                                <input type="email" name="Email" class="form-control" value="@customer.Email" required placeholder="Email" />
                            </div>
                            <div class="mb-2">
                                <input type="text" name="PhoneNumber" class="form-control" value="@customer.PhoneNumber" required placeholder="Phone Number" />
                            </div>
                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-success" onclick="confirmUpdateCustomer(@customer.CustomerID)">Update</button>
                                <button type="button" class="btn btn-danger" onclick="confirmDeleteCustomer(@customer.CustomerID)">Delete</button>
                            </div>
                        </form>
                        
                        <!-- Delete Form -->
                        <form id="deleteCustomerForm-@customer.CustomerID" asp-action="Delete" method="post" style="display:none;">
                            <input type="hidden" name="CustomerID" value="@customer.CustomerID" />
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script>
    // Handle Add Customer with SweetAlert
    function handleAddCustomerSubmit(event) {
        event.preventDefault();

        const form = document.getElementById('addCustomerForm');
        const formData = new FormData(form);

        fetch(form.action, {
            method: 'POST',
            body: formData,
        })
        .then(response => {
            if (response.ok) {
                Swal.fire({
                    title: 'Success!',
                    text: 'The customer was successfully added.',
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire({
                    title: 'Error!',
                    text: 'Failed to add the customer. Please try again.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        })
        .catch(() => {
            Swal.fire({
                title: 'Error!',
                text: 'An unexpected error occurred.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        });
    }

    // Confirm Update with SweetAlert
    function confirmUpdateCustomer(customerID) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You are about to update this customer!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, update it!'
        }).then((result) => {
            if (result.isConfirmed) {
                const form = document.getElementById(`updateCustomerForm-${customerID}`);
                fetch(form.action, {
                    method: 'POST',
                    body: new FormData(form)
                })
                .then(response => {
                    if (response.ok) {
                        Swal.fire({
                            title: 'Success!',
                            text: 'The Customer List was successfully updated.',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Failed to update the customer. Please try again.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                })
                .catch(() => {
                    Swal.fire({
                        title: 'Error!',
                        text: 'An unexpected error occurred.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                });
            }
        });
    }

    // Confirm Delete with SweetAlert
    function confirmDeleteCustomer(customerID) {
        Swal.fire({
            title: 'Are you sure?',
            text: "This action cannot be undone!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                const form = document.getElementById(`deleteCustomerForm-${customerID}`);
                fetch(form.action, {
                    method: 'POST',
                    body: new FormData(form)
                })
                .then(response => {
                    if (response.ok) {
                        Swal.fire({
                            title: 'Success!',
                            text: 'The Customer List was successfully deleted.',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            form.closest('tr').remove();
                        });
                    } else {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Failed to delete the customer. Please try again.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                })
                .catch(() => {
                    Swal.fire({
                        title: 'Error!',
                        text: 'An unexpected error occurred.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                });
            }
        });
    }
</script>
